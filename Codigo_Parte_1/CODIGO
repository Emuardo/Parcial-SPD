//   EMILIANO CENTURION Y MORENA CASTILLO
//   DIVISION 1Â°G TURNO NOCHE
//   PRIMERA PARTE PARCIAL SISTEMA DE PROCESAMIENTO DE DATOS


// DEFINICION DE PINES
#define A 10
#define B 11
#define C 5
#define D 6
#define E 7
#define F 9
#define G 8
#define MAS 4
#define MENOS 3
#define RESET 2
#define UNIDAD A4
#define DECENA A5
#define APAGADOS 0
#define TIMEDISPLAYON 10


// VARIABLES
int numero = 0;      //Guarda el valor del contador
int mas = 1;         //Guarda el estado del boton MAS
int masAntes = 1;    //Guarda el estado anterior del boton MAS
int menos = 1;       //Guarda el estado del boton MENOS
int menosAntes = 1;  //Guarda el estado anterior del boton MENOS
int reset = 1;       //Guarda el estado del boton RESET
int resetAntes = 1;  //Guarda el estado anterior del boton RESET


// FUNCION: SETUP
// La funcion tiene el objetivo configurar y asignar los pines 

void setup()
{
    pinMode(3, INPUT_PULLUP);
    pinMode(4, INPUT_PULLUP);
    pinMode(2, INPUT_PULLUP);
    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(UNIDAD, OUTPUT);
    pinMode(DECENA, OUTPUT);
    digitalWrite(UNIDAD, 0);
    digitalWrite(DECENA, 0);
    verEnDisplay(0);
}

// FUNCION: LOOP
// La funcion tiene como objetivo ser el bucle principal del programa, la cual contiene las condiciones de 
// manejo del contador y lo inicializa 


void loop() 
{
    int presionado = botonPresionado();
    if(presionado == MAS) 
    {
        numero++;
        if(numero > 99)
            numero = 0;
    } 
    else if(presionado == MENOS) 
    {
        numero--;
        if(numero < 0)
            numero = 99;
    } 
    else if (presionado == RESET) 
    {
        numero = 0;
    }
  
 iniciarContador(numero);
}

// FUNCION: VER EN DISPLAY
// La funcion tiene como objetivo el manejo de los segmentos del display dependiendo del numero del contador (UNIDAD Y DECENA)


void verEnDisplay(int numero) 
{
    apagarDisplays();
    switch(numero) 
    {
        case 0:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(E, HIGH);
            digitalWrite(F, HIGH);
            break;
        case 1:
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            break;
        case 2:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(E, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 3:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 4:
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(F, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 5:
            digitalWrite(A, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(F, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 6:
            digitalWrite(A, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(E, HIGH);
            digitalWrite(F, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 7:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            break;
        case 8:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(E, HIGH);
            digitalWrite(F, HIGH);
            digitalWrite(G, HIGH);
            break;
        case 9:
            digitalWrite(A, HIGH);
            digitalWrite(B, HIGH);
            digitalWrite(C, HIGH);
            digitalWrite(D, HIGH);
            digitalWrite(F, HIGH);
            digitalWrite(G, HIGH);
            break;
    }
}

// FUNCION: DIGITO ENCENDIDO
// La funcion tiene como objetivo controlar la visualizacion de los displays a traves de la
// UNIDAD y DECENA, apagando y prendiendo los mismos dependiendo el numero a mostrar

void digitoEncendido(int numero) 
{
    if (numero == UNIDAD) 
    {
        digitalWrite(UNIDAD, LOW);
        digitalWrite(DECENA, HIGH);
        delay(TIMEDISPLAYON);
    } 
    else if (numero == DECENA) 
    {
        digitalWrite(UNIDAD, HIGH);
        digitalWrite(DECENA, LOW);
        delay(TIMEDISPLAYON);
    } 
    else 
    {
        digitalWrite(UNIDAD, HIGH);
        digitalWrite(DECENA, HIGH);
    }
}

// FUNCION: INICIAR CONTADOR
// La funcion tiene como objetivo pasarle a los display el numero que debe mostrar a traves de los segmentos

void iniciarContador(int numero)
{
    digitoEncendido(APAGADOS);
    verEnDisplay(numero / 10);
    digitoEncendido(DECENA);
    digitoEncendido(APAGADOS);
    verEnDisplay(numero - 10 * (numero / 10));
    digitoEncendido(UNIDAD);
}

// FUNCION: BOTON PRESIONADO
// La funcion tiene como objetivo generar el anti - rebote de los botones devolviendo a traves del return 
// la evaluacion mediante condiciones del estado del boton actual

int botonPresionado(void) {
  int mas = digitalRead(MAS);
  int menos = digitalRead(MENOS);
  int reset = digitalRead(RESET);

  if (mas == 1)
      masAntes = 1;
  if (menos)
      menosAntes = 1;
  if (reset)
      resetAntes = 1;

  if (mas == 0 && mas != masAntes) {
      masAntes = mas;
      return MAS;
  }
  if (menos == 0 && menos != menosAntes) {
      menosAntes = menos;
      return MENOS;
  }
  if (reset == 0 && reset != resetAntes) {
    resetAntes = reset;
    return RESET;
  }
  
  return 0;
}

// FUNCION: APAGAR DISPLAY
// La funcion tiene como objetivo apagar todos los segmentos del display

void apagarDisplays(){
   digitalWrite(A, LOW);
   digitalWrite(B, LOW);
   digitalWrite(C, LOW);
   digitalWrite(D, LOW);
   digitalWrite(E, LOW);
   digitalWrite(F, LOW);
   digitalWrite(G, LOW);
}
